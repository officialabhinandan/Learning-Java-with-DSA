ðŸ”´ðŸŸ ðŸŸ¡ Backtracking: It is basically based on the concept of divide and conquer in recursion. Backtracking uses recursion to solve it's problems.
It does so by exploring all the possiblities of any problem, unless it finds the best and feasible solution to it. Recursion occurs when a 
function calls itself repeatedly to split a problem into smaller sub-problems, until it reaches the base case.

Types of backtracking related problem we solve:- âšª Decision, (Taking decision wheather the solution is possible or not)
                        âšª Optimization, (Giving the most shortest/optimized path)
                        âšª Enumeration.  (Giving all the possible solutions)

ðŸ›‘ Backtracking is always happens after function calls. In case of backtracking in arrays, both the time complexity and space complexity are O(n).

ðŸ›‘ðŸ›‘ In case of finding the subsets of a string or an array if the length of the array/string is n, the number of subsets are 2^n. It is different from
finding sub arrays. Here time complexity is O(n*2^n) and space complexity is O(n).

ðŸ›‘ðŸ›‘ðŸ›‘ Time complexity = (Total no of subsets * time required for one subset) [We need to cover n steps to hit the base case each time]
                           (2^n * n) = O(n*2^n)   [Total no is subsets are 2^n because, if there is n elemets/charcaters in an array/string
                                                    Each character has two choices(possible subsets), so multiplying 2*2*2*2.......n times = 2^n times]

ðŸ›‘ðŸ›‘ðŸ›‘ðŸ›‘ In case of finding the permutations of a string, if a string has n characters, then the total number of peermutations will be n!. This 
is an Enumeration type of backtracking.  
