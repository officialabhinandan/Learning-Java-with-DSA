ðŸ”´ðŸŸ ðŸŸ¡ Backtracking: It is basically based on the concept of divide and conquer in recursion. Backtracking uses recursion to solve it's problems.
It does so by exploring all the possiblities of any problem, unless it finds the best and feasible solution to it. Recursion occurs when a 
function calls itself repeatedly to split a problem into smaller sub-problems, until it reaches the base case.

Types of backtracking related problem we solve:- âšª Decision, (Taking decision wheather the solution is possible or not)
                        âšª Optimization, (Giving the most shortest/optimized path)
                        âšª Enumeration.  (Giving all the possible solutions)

ðŸ›‘ Backtracking is always happens after function calls. In case of backtracking in arrays, both the time complexity and space complexity are O(n).

ðŸ›‘ðŸ›‘ In case of finding the subsets of a string or an array if the length of the array/string is n, the number of subsets are 2^n. It is different from
finding sub arrays. Here time complexity is O(n*2^n) and space complexity is O(n).

ðŸ›‘ðŸ›‘ðŸ›‘ Time complexity = (Total no of subsets * time required for one subset) [We need to cover n steps to hit the base case each time]
                           (2^n * n) = O(n*2^n)   [Total no is subsets are 2^n because, if there is n elemets/charcaters in an array/string
                                                    Each character has two choices(possible subsets), so multiplying 2*2*2*2.......n times = 2^n times]

ðŸ›‘ðŸ›‘ðŸ›‘ðŸ›‘ In case of finding the permutations of a string, if a string has n characters, then the total number of permutations will be n!. This 
is an Enumeration type of backtracking. Here, Time Complexity is O(n*n!).  

ðŸ”´ðŸŸ ðŸŸ¡ N Queens problem:- In these type of problems, there are mainly three type of questions come is the interview.
âšª Either we have to give all the possible equations.
âšªâšª Or we need to find whether any possible solution exists or not and print one of them.
âšªâšªâšª Say how many possbile solutions are there.

ðŸ”´ðŸŸ ðŸŸ¡ N Queens Problem:- Time complexity will be O(n!). Recurrence relation is [T(n) = n * T(n-1) + T(isSafe method)] = O(n!) 
ðŸ”´ðŸŸ ðŸŸ¡ Grid Ways:- To find the ways of no of ways to reaach from (0,0) to (n-1, m-1) in an n*m grid matrix. Here normal time complexity using
recursion is O(2^(n+m)) which is exponential and really bad time complexity. So to reduce it we use an permutations based mathematical formula
and reduces it opto O(n+m), linear time complexity.
ðŸ”´ðŸŸ ðŸŸ¡ Sudoku Solver:- It is a 9*9 grid internally divided into 9, 3*3 smaller grids similar to N Queens. Here some numbers between 1 to 9 are 
randomely positioned. We need to fill the blank blocks with numbers between 1 to 9 under some certain conditions. Like the number we put in a particular
block, can't be put anymore on that paticular row, column and grid where the block is situated. We just need to find one possible solution here. 
