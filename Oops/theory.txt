Classes are the group of entities and Objects are the entities in the real world. We can also say that, classes are the logical entities and objects
are the physical constructs which carry class's attributes and properties.
Class is nothing but the blueprint of an object. Classes are consists of attributes/properties and behaviours/functions.

Create objects in Java:-
As you all know, in Java, a class provides the blueprint for objects, you create an object from a class. 
Basically class act as a container where we collect attribute and behaviour of objects. By using instance or object of a class we can able to access member of class.
Using new Keyword : Using new keyword is the most basic way to create an object. This is the most common way to create an object in java. Almost 99% of objects are created in this way. By using this method we can call any constructor we want to call (no argument or parameterized constructors).


// Java program to illustrate creation of Object 
// using new keyword 

public class A  
{ 
    String name = "king"; 
    public static void main(String[] args)  
    { 
        // Here we are creating Object of  
        // A using new keyword 
        A  obj = new  A(); 
        System.out.println(obj.name); 
    } 
}
Output
King

We can able to create n number of object or instance for a class. For every instance of a class separate copy of instance member will create.

class A
{
void add(int a,int b)
{
int s;
s=a+b;
System.out.println(s);
}
public static void main(String args[])
{
A x=new A();
A y=new A();
x.add(10,12);
y.add(3,4);
}
}

Output:
22
7
In the above example , we can find out two objects for class A and for every object separate copy of add method created.
We can able to invoke one member of a class n number of times as per our requirement by using same object reference.

class A
{
void add(int a,int b)
{
int s;
s=a+b;
System.out.println(s);
}
public static void main(String args[])
{
A x=new A();
x.add(10,2);
x.add(3,5);
}
}

Output
12
8
In the above example we invoke add method twice by using same reference of class A.


An object is the real time entity of a class which has four characteristics 
--> Attribute
--> Behaviour 
--> State 
--> Identity
i) Attribute defined about the object.
ii) Behaviour is how object react with the system.
iii) State is a set of properties which can take different values 
    in different times in the object's life. Generally an object has two states, live state and dead state.
    Whenever object executes in an operation we consider it to be in live state, otherwise the object is in the dead state.
iv) Identity is a unique property by which we can distinguish between two objects.

So, class is nothing but the container where we collect attributes and behaviours of similar types of the objects. We can declare variables inside a 
class. Those variables are called instance variables. These are nothing but the attributes of the objects.
similarly we can define methods inside a class. Those methods are called instance methods. These are nothing but the behaviours of the objects.
Then we make objects of class in the main method and access the attributes and behaviours of that particular class.

Access Modifiers/Specifiers:- 

Common properties of OOP is given below-
--> Abstraction
--> Encapsulation.
--> Inheritance.
--> Polymorphism

Abstraction:- Abstraction is basically hiding of data implementation.For example, to drive a car we do not need to know about the mechanism of the car.
We just need to know thae attribute and behaviours of the car. Similarly to use any object we don't require to memory representation of the object.
We just need to know the attribute and behaviours of the object. It's only about knowing essential things.

Encapsulation:- Encapsulation represents wrapping of data and put into a single unit. Similarly Whenever we create an object of a class all the 
properties of that class are wrapped together within the object. That's why they are abstructed from user. Encapsulation is the reason and 
abstruction is the result. 

Inheritance:- It indicates the resuability of code. If we want to access the property of any other member we need a permission. That permission is taken 
to Inherite. Here in OOPs if we want to redefine the properties of a class in another class, then sub class must require to take a permission from 
the parent class. That is called Inheritance. 

Polymorphism:- After getting the permission when we redefine the proparties, that is nothing but Polymorphism. It means single interface multiple access.
There are two kinds of Polymorphism, we can implement in OOPs. Compiletime/Static Polymorphism and Runtime/Dynamic Polymorphism.

i) Compile time/Static Polymorphism:- Here Inheritance is not required. It can be achieved within a single class. Within a single class if we define 
one thing more than one time, that is the example of complie time Polymorphism. For example, method overloading and contructor overloading.

ii) Runtime/Dynamic Polymorphism:- Here we require more than one class. If we define the proparties of one class within another class, that is runtime Polymorphism. For that
inheritance is mandatory. example, method overriding.

P.S. Without implementing runtime Polymorphism, the use of inheritance is nothing but misuse of inheritance. For example a sub or child class Inherites
its super or parent class but doesn't redefine the proparties of the super class. Then what is the essesce of inheritance? 

Java Program is platform independent but JVM and JDK are platform dependent. 
JDK = JRE + Compiler(Dev tools)          // JDK = Java Developmient kit; JRE = Java Runtime Environmen
JRE = JVM + Core Java API Libraries      // JVM = Java Virtual Machine; API = Application Program interface
Remember, JVM is used to run the java program, but we need compiler separately to complie a java program which comes with JDK.

Java is not a fully Object Oriented Programming language. Because of the usage of static keyword and the presense wrapper class.
By using static keyword, we can bypass the method of the making of object to access any member.
All the primary datatypes present in java (int, char, float, long....) have a predefined class each called wrapper class.
That's why java is not a fully object oriented programming language.

In java basically we work with 4 types of variable:-
--> Instance variable
--> Local variable
--> Reference variable
--> Static variable
Instance variable are those which are attribute of an object. We can declare inside a class.
Local variable are declared inside a method, constructor or block.
Reference refers to an object. We use it at the time of creating the object.
Static variable or class variable can be accessed without creating the object.

METHOD OVERLOADING:-
If a class has multiple methods having same name but different signatures, it is known as Method Overloading. Signature of a method indicates no of parameter as well as type of parameter.
In the concept of method overloading at compile time by knowing parameter control recognize which method will invoke, that’s why method overloading is the example of compile time polymorphism.
If we have to perform only one operation, having same name of the methods increases the readability of the program.
Overloading allows different methods to have the same name, but different signatures where the signature can differ by the number of input parameters or type of input parameters or both. Overloading is related to compile-time (or static) polymorphism.
public class Sum { 
      // Overloaded sum(). This sum takes two int parameters 
    public int sum(int x, int y) 
    { 
        return (x + y); 
    } 
    // Overloaded sum(). This sum takes three int parameters 
    public int sum(int x, int y, int z) 
    { 
        return (x + y + z); 
    } 
    // Overloaded sum(). This sum takes two double parameters 
    public double sum(double x, double y) 
    { 
        return (x + y); 
    } 
     
    public static void main(String args[]) 
    { 
        Sum s = new Sum(); 
        System.out.println(s.sum(10, 20)); 
        System.out.println(s.sum(10, 20, 30)); 
        System.out.println(s.sum(10.20, 20.50)); 
    } 
}
Output
30
60
30.70

Constructor:-
Constructor is a block of code that initializes the newly created object. A constructor resembles an instance method in java but it’s not a method as it doesn’t have a return type. In short constructor and method are different(More on this at the end of this guide). People often refer constructor as special type of method in Java.
Constructor has same name as the class and looks like this in a java code.
public class MyClass{
   //This is the constructor
   MyClass(){
   }
   ..
}
Need of Constructor
Think of a Box. If we talk about a box class then it will have some class variables (say length, breadth, and height). But when it comes to creating its object(i.e Box will now exist in computer’s memory), then can a box be there with no value defined for its dimensions. The answer is no.
So constructors are used to assign values to the class variables at the time of object creation, either explicitly done by the programmer or by Java itself (default constructor).

When is a Constructor called ?
Each time an object is created using new() keyword at least one constructor (it could be default constructor) is invoked to assign initial values to the data members of the same class.
A constructor is invoked at the time of object or instance creation. For Example:

class A
{   
  .......

  // A Constructor
  A() {}

  .......
}

// We can create an object of the above class
// using the below statement. This statement
// calls above constructor.
A obj = new A(); 

Rules for writing Constructor:
Constructor(s) of a class must has same name as the class name in which it resides.
A constructor in Java can not be abstract, final, static and Synchronized.
Access modifiers can be used in constructor declaration to control its access i.e which other class can call the constructor.

Types of constructor
There are three type of constructor in Java:

No-argument constructor: A constructor that has no parameter is known as default constructor. If we don’t define a constructor in a class, then compiler creates default constructor(with no arguments) for the class. And if we write a constructor with arguments or no-arguments then the compiler does not create a default constructor.
Default constructor provides the default values to the object like 0, null, etc. depending on the type.
// no-argument constructor 
  class A 
{ 
    int num; 
    String name; 
     // this would be invoked while an object 
    // of that class is created. 
    A() 
    { 
       
 System.out.println("Constructor called"); 
    } 
} 
  
class  Demo 
{ 
    public static void main (String[] args) 
    { 
        // this would invoke default constructor. 
        A  x = new A(); 
         // Default constructor provides the default 
        // values to the object like 0, null 
        System.out.println(x.name); 
        System.out.println(x.num); 
    } 
} 
Output :
Constructor called
null
0

Parameterized Constructor: A constructor that has parameters is known as parameterized constructor. If we want to initialize fields of the class with your own values, then use a parameterized constructor.
// parameterized constructor. 
import java.io.*; 
  
class  A 
{ 
    // data members of the class. 
    String name; 
    int id; 
  
    // constructor would initialize data members 
    // with the values of passed arguments while 
    // object of that class created. 
    A(String name, int id) 
    { 
        this.name = name; 
        this.id = id; 
    } 
} 
  
class Demo 
{ 
    public static void main (String[] args) 
    { 
        // this would invoke the parameterized constructor. 
        A  x = new  A("adam", 1); 
        System.out.println("Name :" + x.name + 
                           " and Id :" + x.id); 
    } 
} 
Output:

Name :adam and Id :1

Does constructor return any value?
There are no “return value” statements in constructor, but constructor returns current class instance. We can write ‘return’ inside a constructor.

Constructor Overloading

Like methods, we can overload constructors for creating objects in different ways. Compiler differentiates constructors on the basis of numbers of parameters, types of the parameters and order of the parameters.
// Java Program to illustrate constructor overloading 
// using same task (addition operation ) for different 
// types of arguments. 
class A
{ 
    // constructor with one argument 
    A(String name) 
    { 
        System.out.println("Constructor with one " + 
                      "argument - String : " + name); 
    } 
  
    // constructor with two arguments 
    A(String name, int age) 
    { 
  
        System.out.println("Constructor with two arguments : " + 
                " String and Integer : " + name + " "+ age); 
  
    } 
  
    // Constructor with one argument but with different 
    // type than previous.. 
    A(long id) 
    { 
        System.out.println("Constructor with one argument : " + 
                                            "Long : " + id); 
    } 
} 
  
class  Demo 
{ 
    public static void main(String[] args) 
    { 
        // Creating the objects of the class named  A 
        // by passing different arguments 
  
        // Invoke the constructor with one argument of 
        // type 'String'. 
        A  x= new  A("raj"); 
  
        // Invoke the constructor with two arguments 
        A  y = new A("rahul", 10); 
  
        // Invoke the constructor with one argument of 
        // type 'Long'. 
        A  z= new  A(325614567); 
    } 
} 
Output:
Constructor with one argument - String : raj
Constructor with two arguments - String and Integer : rahul  10
Constructor with one argument - Long : 325614567

How constructors are different from methods in Java?
Constructor(s) must have the same name as the class within which it defined while it is not necessary for the method in java.
Constructor(s) do not return any type while method(s) have the return type or void if does not return any value.
Constructor is called only once at the time of Object creation while method(s) can be called any numbers of time.

Copy Constructor:- We use copy constructor to copy the value of the instance member of one object within the instance member of another object of the same class.
 








