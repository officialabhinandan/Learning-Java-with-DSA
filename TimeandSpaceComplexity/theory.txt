ðŸ”´ðŸŸ ðŸŸ¡ Time Complexity:- Time complexity is defined in terms of how much times it takes to run a given algorithm, based on the length of the input. 
Time complexity is not a measurement of how much time it takes to execute a particular algorithm because such factors depends on the programming language,
 operating system, and processing power.

ðŸ”´ðŸŸ ðŸŸ¡ Time complexity is a type of computational complexity that describes the time required to execute an algorithm. The time complexity of an 
algorithm is the amount of time it takes for each statement to complete. As a result, it is highly dependent on the size of the processed data.
 It also aids in defining an algorithm's effectiveness and evaluating its performance.

ðŸ”´ðŸŸ ðŸŸ¡Order Complexity Analysis:- Amount of space and time taken up by an algorithm as function of input size. Not the actual time taken.
In case of linear time complexity, time is directly proportinal to n. So the time complexity is O(n). In case of linear search the time complexity vs
input size create a linear graph as well as a linear function or relation with a eqaution of straight line(ax+b).
Time complexity, y = an + b = O(n) , where n is an variable. 
In case of an sorted array the time complexity is always constant. So the time complexity vs input size graph will be a constant y value graph
Here, time complexity, y = kx = O(k) , where k is a constant.

ðŸ”´ðŸŸ ðŸŸ¡ For very small input size, linear time complexity algorithm is more efficient than constant time algorithm. But in case of worst case and huge input 
size, it just gets reversed. 
In case of Big O notation, it provides an upperbound. That means it gives the maximum opper bound limit of time complexity(worst case). The program can 
take less time than the limit, but never exit the limit.

ðŸ”´ðŸŸ ðŸŸ¡ To find the time complexity from the equation of Bio O, we need to ignore the constants and take the maximum term of the n.
For example, f(n) = a(n^2) + blogn + c,
                               âšª Here we ignore the constants like a, b and c.
                               âšª The highest teerm of n is n^2.
So the time complexity of the function will be O(n^2). Refer to ðŸ›‘Cormen'sðŸ›‘ book for more info related to time complexity.
So, f(n) = O(g(n)) 
or, lim {|f(n)|/g(n)} < infinity (where n tends to infinity). --> Big O notation's eq.

ðŸ”´ðŸŸ ðŸŸ¡ Big Î© Notation:- Just like Big O Notation symbols worst came time complexity and provides the upper bound, Big Î© Notation represents Best 
time complexity and provides the lower limit. The means the program can run with more time complexity than the limit provided by the Big Î© Notation, but
can't run with less than that. 

ðŸ”´ðŸŸ ðŸŸ¡ Big Î˜ Notation:- It is used to represent the average bound. When upper bound and lower bound are equal than we call it big Î˜.

ðŸ›‘ There is also small O/Î˜/Î©. It depends on how tightly or loosely we calculate time complexity. If we calculate very tightly or accurately it called 
Big O/Î˜/Î© and vice versa. 
ðŸ›‘ðŸ›‘ Generally the time complexity ranges between O(1) constant time complexity to O(2^n) exponential time complexity.
 It goes like: Best --> O(1)<O(logn)<O(n)<O(n^2)<<O(2^n) Worst-->. 
ðŸ›‘ðŸ›‘ðŸ›‘ Exponential time complexity we write when we write the code of recursion. To optimize that we use a technique called memorization which
  comes under dynamic programming(DP). Using DP we can reduce the time complexity upto O(n^2)/O(n). But for very less number of inputs we don't need that.

ðŸ”´ðŸŸ ðŸŸ¡ Space Complexity:- There are two types of memories inside the computer memory. 
i) Stack memory (Here function call happenes and we create call stack)
ii) Heap memory (As soon as we declare any variable/array/object, our program allocates some memories inside the computer memory. The relation between
occupying memeory with respect to the input size is called space complexity).
Space complexity = inpute space + auxiliary space. For example, in case of merge sort we use auxiliary/temporary array of the same size.

ðŸ›‘ Generally between time and space complexity we prefer time more than space unless space constraint is applied specially.

ðŸ”´ðŸŸ ðŸŸ¡ Bubble Sort Time Complexity Analysis:- The worst case comes in Bubble Sort time complexity comes when the array is already sorted in 
reverse direction. In both the case(base and worst), the time complexity will be O(nÂ²). Because in best case when the array is already sorted in the 
samw direction, the internal swapping may not be performed but the outer two loops will run n times each, where i is used to track the index of the array
and j is used is tracked an element and its next element at a time for checking the probability of swapping.

ðŸ”´ðŸŸ ðŸŸ¡ In case of optimized bubble sort where we use a boolean variable to track wheather the swapping task is performing or not at a single turn,
the best case time complexity is O(n) and worst case is O(nÂ²). See photos for reference.