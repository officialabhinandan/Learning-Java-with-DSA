ðŸ”´ðŸŸ ðŸŸ¡ LinkedList:- In simple word, LinkedList is a linear data structure where we connect the data elements/nodes with the help of chains/links. Actually
a linked list is a chain of data nodes or elements which are interconnected with a link or chain. If we visualize every single nodes of a LinkedList
we notice that a node or data element has two parts. First part stores the data. It may be integer, float, boolean, long or string type. Second part 
consists of next or reference or pointer which is actually points towards the next node. It links the next node. In case of last node, the next pointer
referes to null. 

ðŸ›‘ In Java we use a reference variable in the place of next, which is a reference to the next node because their is no concept of pointer in Java 
unlike c or c++. Basically reference variable is a type of variable(also read in OOPs) that points to an object. Here the object is the node(next node).

ðŸ›‘ So to create a LinkedList, we need to make NODE class where every nodes are the onject of the class NODE. Another reason to put all nodes inside the
NODE class is that each node stores same type of informations (data and ref to the next node). So apperantly we know the blueprint of the node.  
Using that we can make a central NODE class which carries all the proparties of each node present in the LinkedList. Each individual node is the 
object of that NODE class. Now we'll apply the concept of OOPs to build this data structure. 

class Node{
    int data;
    Node next; // data type is itself the class type (bcz the next variable is pointing towards the object of the next node)
    
    // defining constructor
    public Node(int data){
        this.data = data; // this.data is present inside the class Node
        this.next = null; // at starting point we assume that it isn't pointing towards any other node
    }
}
ðŸ›‘ So, to create a single node we need to create an object of the Node inside the LinkedList class.
ðŸ›‘ We keep track two of the most important or special nodes in a linkedlist. 
    âšª Head Node (1st node) and, 
    âšª Tail Node (last node before null).
ðŸ›‘ If we have data of the head and tail node, we can traverse throughout the linkedlist using the data of the next.
ðŸ›‘ We can access one node at a time in a linkedlist.
   in a linkedlist.
ðŸ›‘ At the last node, the next points towards the null. In case we have a linkedlist consists of a single node, the head and the tail points
to the same node. In that case head equals to tail.

ðŸ›‘ðŸ›‘ðŸ›‘ To add node at first of a linkedlist :- // T.C = O(1)
    âšª First, we create a node and check if there is any further node available to connect to not using the next variable.
    âšª If no next node is found, we make the same node head and tail both.
    âšª But if another node is available to link, at first we link both the nodes using next refence variable.
    âšª Whenever we type newNode.next = head; we store the address of the head variable (not the value) inside the next refence variable of the newNode.
    âšª Atlast we declare the newly added node as head.

ðŸ›‘ðŸ›‘ðŸ›‘ To add node at last of a linkedlist :-  // T.C = O(1)
    âšª Create a new node (newNode),
    âšª Check wheather the linkedlist is empty or not. In that case declare the node as tail as well as head node. The next varibale is by default 
        pointed towards null. 
    âšª Tail's next = new Node
    âšª tail = new Node.

ðŸ›‘ðŸ›‘ðŸ›‘ To print a LinkedList :-  // T.C = O(n)
    âšª Check the ll is empty or not(head == null). In that case print null.
    âšª Create a temporary node and store the value of head inside it(Node temp = head)
    âšª Now run a while loop untill temp != null and print temp.data(Sysout(temp.data + " ")) and move towards the next Node(temp = temp.next).

ðŸ›‘ðŸ›‘ðŸ›‘ To add node at middle of a linkedlist :- // T.C = O(n)
    âšª If we try to insert at index 0, call addFirst(data) and return.
    âšª Create a new Node to insert (Node newNode = new Node(data)) and make another new Node temp and assign it as head(Node temp = head).
    âšª Create i(int i=0) variable to track the index while traversing throughout the ll.
    âšª Run while loop and traverse the temp node (temp = temp.next) throughout the ll untill it reaches the previous node (i<index-1).
    âšª while i reaches the previous node connect newNode's next with the next node (newNode.next = temp.next).
    âšª And connect temp with the new Node (temp.next = newNode).

ðŸ›‘ðŸ›‘ðŸ›‘ To remove a node from the first of a ll :-
    âšª If the ll is empty from the beginning (if(size == null)), print empty.
    âšª If the ll has only one node, make it head and tail and then declare it as null (if(size == 1) { head = tail = null })
    âšª For normal cases declare head = head.next. The link will be automatically broke and the next node wil be the new head. 
    âšª Garbage collector will automatically delete the previous head node. 

ðŸ›‘ðŸ›‘ðŸ›‘ To remove a node form the last of a ll :-
    âšª Check if the size of the ll is 0 (if(size==0)), print "empty ll". Return positive/negative infinite value. (Optional)
    âšª In case, the ll has only one node(if(size==1)), store that node's data into val(int val = tail.data). 
       Make that node tail as well as head. Make size = 0. Return val.
    âšª For general cases, make a node prev and store head inside it. (Node prev = head).
    âšª Traverse through the ll untill it reaches size-2 (prev node of the last node).
    âšª As soon as it reaches size-2 node, store tail's data inside val (int val = prev.next.data/tail.next) and store connect prev node with null. 
       (prev.next = null).
    âšª Make the prev node, the new tail(tail = prev) and reduce size of the ll (size--).
    âšª Return the val.

ðŸ›‘ðŸ›‘ðŸ›‘ Iterative search of an element inside an ll :-  public int iterativeSearch(int key){}
   âšª To search an element is present inside an ll or not, we take a temporary node and assign head inside it. (Node temp = head).
   âšª We also take an index i.
   âšª Run while loop with condition [while(temp!=null)], we traverse by doing temp = temp.next and increase i (i++).
   âšª As soon as it founds the element (if(temp.data == key)) return the index (i). 
   âšª Else, return invalid index(-1).

ðŸ›‘ðŸ›‘ðŸ›‘ Recursive search of an element inside an ll :- public int recursiveSearch(int key){ return helperFunc(head, key)} and public int helperFunc(Node head, int key){ ...code...}
   âšª Here take help of a helper function as we can only pass key integer value inside the recursiveSearch function. 
   âšª Inside the helper function we pass a node(Node head) and an integer (int key) to search inside the ll.
   âšª In the recursive function, the base case is if the ll is empty (if(size == 0)) return -1. 
   âšª If head's data is itself the key (if(head.data == key)), return 0.
   âšª As recursive steps, the fuction will recursively call itself with head's next [int idx = helperFunc(head.next, key);].
   âšª If it doesn't find the key, it eventually returns -1 otherwise it returns its index as 0 (unlike iteration).
   âšª Outside the loop we adjust its index by returning idx+1.

ðŸ›‘ðŸ›‘ðŸ›‘ To reverse a ll :-
   âšª Here we'll take three variables of Node types. Prev, curr and next.
   âšª Here we can set Curr as head and tail as we are performing revrse operations of a ll.
   âšª We'll traverse the ll using curr variable (while(curr!=null)).
   âšª Then link curr node with the next node (next = curr.next).
   âšª Then link the curr node with the prev node (curr.next = prev).
   âšª Make prev node the new curr node (prev = curr) and curr node is the new next node (curr = next).

ðŸ›‘ðŸ›‘ðŸ›‘ To delete Nth node from the last of a ll :-  public void deleteNthNodefromEnd(int n){}
   âšª According to the logic if we have to delete nth node from the end, we have to travel size-n+1 nodes.
   âšª Taking syz variable and calculate the size of the ll and traversing the nodes using a temporary node.
      Node temp = head;
        while(temp != null){
            temp = temp.next;
            syz++;
        }
    âšª Now if we have to remove the first element, we do 
     if(n == syz){
            head = head.next;
            return;
        }
    âšª For normal cases, we do
        int idx = 1;
        int idxToFind = syz-n;
        Node prev = head;

        while(idx < idxToFind){
            prev = prev.next;
            idx++;
        }
        
        prev.next = prev.next.next;
        return;

ðŸ›‘ðŸ›‘ðŸ›‘ Check if ll is a palindrome :-
    âšª It helps us to learn slow-fast concept and reverse of the half part of a ll.
    âšª Step 1: Find middle node, step 2: reverse the 2nd half, step 3: check whether 1st half == 2nd ha;f or not.
    âšª 



ðŸ”´ðŸŸ ðŸŸ¡ Slow-fast technique or Turtle-hair technique :- So check whether a ll is palindrome or not we need to find the reverse of the ll first and 
then we have to reverse the ll after that to compare both the parts. To find the middle node we can calculate the sixe of the node and then we can find
middle using size/2. otherwise we can also take two points fast and slow. Both the pointers start from the head node. Where slow pointer jumps one
by one node (+1), the fast one moves with (+2) frequency. Let's make a function to find the middle node of the ll. 